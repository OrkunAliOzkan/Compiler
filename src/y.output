Terminals which are not used

   DATATYPE_INT
   DATATYPE_CHAR
   DATATYPE_FLOAT
   DATATYPE_LONG
   DATATYPE_SHORT
   DATATYPE_VOID
   DO
   WHILE
   FOR
   CONTINUE
   GOTO
   SIGNED
   UNSIGNED
   CONDITIONAL_LT
   CONDITIONAL_LTET
   CONDITIONAL_GTET
   CONDITIONAL_EE
   ARITHMETIC_PLUS
   ARITHMETIC_DEDUCT
   ARITHMETIC_DASH
   ARITHMETIC_E
   TYPE_STAR
   TYPE_AMPERSAND
   BREAK


State 15 conflicts: 1 shift/reduce


Grammar

    0 $accept: line $end

    1 line: stmt '\n'

    2 expr: VARIABLE CONDITIONAL_GT NUMBER

    3 stmt: IF OPEN_BRACK expr CLOSE_BRACK stmt
    4     | IF OPEN_BRACK expr CLOSE_BRACK stmt ELSE stmt
    5     | RETURN NUMBER SEMICOLON


Terminals, with rules where they appear

$end (0) 0
'\n' (10) 1
error (256)
DATATYPE_INT (258)
DATATYPE_CHAR (259)
DATATYPE_FLOAT (260)
DATATYPE_LONG (261)
DATATYPE_SHORT (262)
DATATYPE_VOID (263)
DO (264)
WHILE (265)
FOR (266)
CONTINUE (267)
GOTO (268)
SIGNED (269)
UNSIGNED (270)
CONDITIONAL_LT (271)
CONDITIONAL_LTET (272)
CONDITIONAL_GT (273) 2
CONDITIONAL_GTET (274)
CONDITIONAL_EE (275)
ARITHMETIC_PLUS (276)
ARITHMETIC_DEDUCT (277)
ARITHMETIC_DASH (278)
ARITHMETIC_E (279)
OPEN_BRACK (280) 3 4
CLOSE_BRACK (281) 3 4
TYPE_STAR (282)
TYPE_AMPERSAND (283)
SEMICOLON (284) 5
IF (285) 3 4
ELSE (286) 4
RETURN (287) 5
BREAK (288)
VARIABLE (289) 2
NUMBER (290) 2 5


Nonterminals, with rules where they appear

$accept (37)
    on left: 0
line (38)
    on left: 1, on right: 0
expr (39)
    on left: 2, on right: 3 4
stmt (40)
    on left: 3 4 5, on right: 1 3 4


state 0

    0 $accept: . line $end

    IF      shift, and go to state 1
    RETURN  shift, and go to state 2

    line  go to state 3
    stmt  go to state 4


state 1

    3 stmt: IF . OPEN_BRACK expr CLOSE_BRACK stmt
    4     | IF . OPEN_BRACK expr CLOSE_BRACK stmt ELSE stmt

    OPEN_BRACK  shift, and go to state 5


state 2

    5 stmt: RETURN . NUMBER SEMICOLON

    NUMBER  shift, and go to state 6


state 3

    0 $accept: line . $end

    $end  shift, and go to state 7


state 4

    1 line: stmt . '\n'

    '\n'  shift, and go to state 8


state 5

    3 stmt: IF OPEN_BRACK . expr CLOSE_BRACK stmt
    4     | IF OPEN_BRACK . expr CLOSE_BRACK stmt ELSE stmt

    VARIABLE  shift, and go to state 9

    expr  go to state 10


state 6

    5 stmt: RETURN NUMBER . SEMICOLON

    SEMICOLON  shift, and go to state 11


state 7

    0 $accept: line $end .

    $default  accept


state 8

    1 line: stmt '\n' .

    $default  reduce using rule 1 (line)


state 9

    2 expr: VARIABLE . CONDITIONAL_GT NUMBER

    CONDITIONAL_GT  shift, and go to state 12


state 10

    3 stmt: IF OPEN_BRACK expr . CLOSE_BRACK stmt
    4     | IF OPEN_BRACK expr . CLOSE_BRACK stmt ELSE stmt

    CLOSE_BRACK  shift, and go to state 13


state 11

    5 stmt: RETURN NUMBER SEMICOLON .

    $default  reduce using rule 5 (stmt)


state 12

    2 expr: VARIABLE CONDITIONAL_GT . NUMBER

    NUMBER  shift, and go to state 14


state 13

    3 stmt: IF OPEN_BRACK expr CLOSE_BRACK . stmt
    4     | IF OPEN_BRACK expr CLOSE_BRACK . stmt ELSE stmt

    IF      shift, and go to state 1
    RETURN  shift, and go to state 2

    stmt  go to state 15


state 14

    2 expr: VARIABLE CONDITIONAL_GT NUMBER .

    $default  reduce using rule 2 (expr)


state 15

    3 stmt: IF OPEN_BRACK expr CLOSE_BRACK stmt .
    4     | IF OPEN_BRACK expr CLOSE_BRACK stmt . ELSE stmt

    ELSE  shift, and go to state 16

    ELSE      [reduce using rule 3 (stmt)]
    $default  reduce using rule 3 (stmt)


state 16

    4 stmt: IF OPEN_BRACK expr CLOSE_BRACK stmt ELSE . stmt

    IF      shift, and go to state 1
    RETURN  shift, and go to state 2

    stmt  go to state 17


state 17

    4 stmt: IF OPEN_BRACK expr CLOSE_BRACK stmt ELSE stmt .

    $default  reduce using rule 4 (stmt)
